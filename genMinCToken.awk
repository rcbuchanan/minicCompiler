#!/usr/bin/awk -f

BEGIN {
print "\
/* DO NOT MODIFY!!! AUTOGENERATED CODE!!*/ \n\
package cs536.syntax; \n\
\n\
import org.antlr.runtime.CharStream;\n\
import org.antlr.runtime.CommonToken;\n\
import org.antlr.runtime.RecognizerSharedState;\n\
\n\
/**\n\
   A simple interface to the ANTLR Token class\n\
 \n\
   This handles setting up some of the required metapayload based on the\n\
   recognizer state in one place so that other token types do not\n\
   need to deal with it directly.\n\
 */\n\
public class MinCToken extends CommonToken\n\
{\n\
	Payload payload;\n\
	public MinCToken(CharStream stream, RecognizerSharedState state, int stopIndex, Payload payload) \n\
	{\n\
		super(stream, state.type, state.channel, state.tokenStartCharIndex, stopIndex);\n\
		setLine(state.tokenStartLine);\n\
		setText(state.text);\n\
		setCharPositionInLine(state.tokenStartCharPositionInLine);\n\
		\n\
		this.payload = payload;\n\
	}\n\
\n\
	\n\
	/* return the payload as a string if it exists, otherwise, just return the idString()*/\n\
	public String toString()\n\
		{return (payload==null) ? idString() : payload.toString();}\n\
	\n\
	/* ANTLR ids as strings. Generated automatically from the .tokens file*/\n\
	public String idString()\n\
	{\n\
		String rv;\n\
		switch( getType() )\n\
		{\n\
"

FS="="
}

$1 $2 {
print "\
			case MinC." $1 ": rv = \"" $1 "\"; break;" }


END {
print "\
			default: rv = \"Bad Token\";\n\
		}\n\
		return rv;\n\
	}\n\
}\n\
"

}
